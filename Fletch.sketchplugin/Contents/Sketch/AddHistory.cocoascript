@import 'Fletch.framework/FletchSketchHelper.js'
@import 'Libraries/MochaJSDelegate.js'
@import 'Libraries/ga.js'

function addHistory(context, shouldKeepAround = true) {
  // 存储线程标识符，避免弹出多个窗口
  var threadDictionary = NSThread.mainThread().threadDictionary();
  var identifier = "com.flyme.uxd.pbb.sketch-helper.addHistory";

  // 如果已经存在了弹窗，则直接退出，并抖动窗口提示
  if (threadDictionary[identifier]) {
    threadDictionary[identifier].shakeWindow();
    return;
  }

  //初始化 GA
  var ga = new Analytics(context);

  var overviewArtboard = prepareOverviewArtboard(context);
  if (overviewArtboard == null){
    return;
  }
  //定义 Delegate 所需要的方法
  if (shouldKeepAround) {
    COScript.currentCOScript().setShouldKeepAround_(true);
  }
  
  var historyDelegate = new MochaJSDelegate();
  historyDelegate.setHandlerForSelector("handleHistoryinAddHistoryWindowController:WithInfo:", function(addHistoryWC, userInfo){
    generateHistory (context, overviewArtboard, addHistoryWC, userInfo, ga);
  });

  //生成弹出的窗口，设定 Delegate
  var historyWC = [[AddHistoryWindowController alloc] initWithWindowNibName:@"AddHistoryWindowController"];
  historyWC.delegate = (historyDelegate.getClassInstance());
  var titleWithExtension = context.document.window().title();
  var title = titleWithExtension;
  var extension = titleWithExtension.substring(titleWithExtension.length() - 7, titleWithExtension.length());
  if (extension.toUpperCase() == ".SKETCH") {
    title = titleWithExtension.substring(0, titleWithExtension.length() - 7);
  }
  // 需要判断末位是否为“.sketch”来隐藏
  [[historyWC window] setTitle: "添加更新记录 - " + title];
  [historyWC showWindow:self];

  //关闭窗口后需要移除对窗口的引用
  historyDelegate.setHandlerForSelector("willCloseWindow", function(){
    closeAddHistoryWindow(historyWC);
  });

  threadDictionary[identifier] = historyWC;
}

//获得概述画板，如果没有找到，或者找到多个就要求用户选择
function prepareOverviewArtboard (context) {
  var artboardsOfCurrentPage = context.document.currentPage().artboards();
  var overviewArtboardArray = [];
  for (var i = 0; i < artboardsOfCurrentPage.length; i++) {
    if (artboardsOfCurrentPage[i].name() == "概述") {
      overviewArtboardArray.push(artboardsOfCurrentPage[i]);
    }
  }

  //如果只有一个叫“概述”的画板
  if (overviewArtboardArray.length == 1) {
    return overviewArtboardArray[0];
  } else {
    //如果有超过一个，或者少于一个叫“概述”的画板，就从选择的画板里找
    var selection = context.selection;
    var selectedArtboards = [];
    for (var i = 0; i < selection.length; i++) {
      if (selection[i].isMemberOfClass(MSArtboardGroup)) {
        selectedArtboards.push(selection[i]);
      }
    }
    if (selectedArtboards.length == 1 ) {
      if (selectedArtboards[0].name() == "概述") {
        return selectedArtboards[0];
      }
    } else {
      var alert = [[NSAlert alloc] init];
      [alert setMessageText:"未找到可添加更新记录的画板"];
      [alert setInformativeText:"请确保当前页面只有一个名为“概述”的画板。\n如果有多个名为“概述”的画板，你可以选中希望添加更新记录的“概述”画板，并重新添加更新记录"];
      [alert addButtonWithTitle:"确定"];
      [alert beginSheetModalForWindow:context.document.window() completionHandler:nil];
      return null;
    }
  }
}

function generateHistory (context, overviewArtboard, addHistoryWC, userInfo, ga) {

  //提取数据
  var updateDate = userInfo["date"];
  var author = userInfo["author"];
  var notesArray = userInfo["notes"];
  var willCombine = userInfo["willConbineHistoryOfSameDay"];

  //获取原有目录
  var historyLayerGroupsArray = [];
  var historyLayerGroup = null;
  var historyTitleTextLayer = null;
  for (var i = 0; i < overviewArtboard.layers().length; i++) {
    if (overviewArtboard.layers()[i].name() == "更新记录" && overviewArtboard.layers()[i].isMemberOfClass(MSLayerGroup)) {
      historyLayerGroup = overviewArtboard.layers()[i];
      var historyLayers = historyLayerGroup.layers();
      for (var j = 0; j < historyLayers.length; j++) {
        if (historyLayers[j].isMemberOfClass(MSLayerGroup)) {
          historyLayerGroupsArray.push(historyLayers[j]);
        } else if (historyLayers[j].isMemberOfClass(MSTextLayer) && historyLayers[j].name() == "更新记录") {
          historyTitleTextLayer = historyLayers[j];
        }
      }
      break;
    }
  }

  if (historyLayerGroup == null) {
    var alert = [[NSAlert alloc] init];
    [alert setMessageText:"未找到“更新记录”图层组"];
    [alert setInformativeText:"请确保“概述”画板里有“更新记录”图层组"];
    [alert addButtonWithTitle:"确定"];
    [alert beginSheetModalForWindow:addHistoryWC.window() completionHandler:nil];
    return false;
  }

  // 将更新记录图层组按从新到旧的顺序排序
  function compareLayers (firstLayer, secondLayer) {
    if (firstLayer.frame().x() != secondLayer.frame().x()) {
      return firstLayer.frame().x() - secondLayer.frame().x();
    } else {
      return firstLayer.frame().y() - secondLayer.frame().y();
    }
  }

  historyLayerGroupsArray.sort(compareLayers);


  function generateUpdateNotes (notesArray) {
    var updateNotesText = "";
    for (var i = 0; i < notesArray.length; i++) {
      updateNotesText += notesArray[i];
      if (i != notesArray.length - 1) {
        updateNotesText += "\n";
      }
    }
    return updateNotesText;
  }

  function generateNumberAndNotesTextLayer(notesArray) {

    //生成更新记录图层，设定相应样式
    var numberAndNotesTextLayer = MSTextLayer.new(); 
    numberAndNotesTextLayer.setStringValue(generateUpdateNotes(notesArray));

    var paragraphStyle = [[NSMutableParagraphStyle alloc] init];
    paragraphStyle.minimumLineHeight = 40;
    paragraphStyle.maximumLineHeight = 40;
    paragraphStyle.paragraphSpacing = 14;
    var attributes = {
      'NSColor' : [NSColor colorWithSRGBRed:74/255 green:74/255 blue:74/255 alpha:1],
      'NSFont' : [NSFont fontWithName: "PingFangSC-Medium" size: 24],
      'NSParagraphStyle' : paragraphStyle
    };
    var textList = [[NSTextList alloc] initWithMarkerFormat:"{decimal}." options:0];

    //TO DO: 设定序号样式之后会导致后面几行多了个空格，可能是系统的 bug
    numberAndNotesTextLayer.setName("更新内容");
    numberAndNotesTextLayer.setStyleAttributes(attributes);
    numberAndNotesTextLayer.changeListType(textList);
    numberAndNotesTextLayer.setTextBehaviour(1);
    numberAndNotesTextLayer.frame().setWidth(539);
    numberAndNotesTextLayer.adjustFrameToFit();

    return numberAndNotesTextLayer;
  }

  //生成日期字符串（考虑时区、语言等因素，确保转换为中文日期）
  var dateFormatter = [[NSDateFormatter alloc]init];
  [dateFormatter setTimeZone: [NSTimeZone localTimeZone]];
  var locale = [[NSLocale alloc] initWithLocaleIdentifier:@"zh_CN"];
  var localeFormatString = [NSDateFormatter dateFormatFromTemplate:@"dMMM" options:0 locale:locale];
  dateFormatter.dateFormat = localeFormatString;
  var localizedString = [dateFormatter stringFromDate:updateDate];

  var latestHistoryLayersGroup = historyLayerGroupsArray[0];

  //如果历史记录为空，则直接生成新内容
  if (historyLayerGroupsArray.length == 0){
    willCombine = 0;
  } else {
    //如果最新记录与更新日期不同，则直接生成新内容
    if (latestHistoryLayersGroup.name().localeCompare(localizedString) != 0) {
      willCombine = 0;
    }
  }

  //如果不选择合并同一天记录，或者历史记录原本为空，则全部内容新生成
  if (willCombine == 0) {

    //生成新目录
    var updateHistorylayerGroup = MSLayerGroup.new();
    updateHistorylayerGroup.setName(localizedString);

    //生成日期和设计师图层
    var dateAndDesigner = localizedString;
    if (author != "") {
      dateAndDesigner = localizedString + "   " + author;
    }
    var dateAndDesignerTextLayer = MSTextLayer.new();
    dateAndDesignerTextLayer.setStringValue(dateAndDesigner);
    dateAndDesignerTextLayer.setName(dateAndDesigner);
    var font = [NSFont fontWithName: "PingFangSC-Thin" size: 38];
    dateAndDesignerTextLayer.setFont(font);
    dateAndDesignerTextLayer.textColor = [MSImmutableColor colorWithRed:26/255 green:26/255 blue:26/255 alpha:1];
    dateAndDesignerTextLayer.adjustFrameToFit();
    dateAndDesignerTextLayer.frame().setWidth(521);

    //生成更新记录图层
    var numberAndNotesLayer = generateNumberAndNotesTextLayer(notesArray);
    updateHistorylayerGroup.addLayers([dateAndDesignerTextLayer, numberAndNotesLayer]);
    historyLayerGroupsArray.unshift(updateHistorylayerGroup);
    [historyLayerGroup insertLayer:updateHistorylayerGroup atIndex: 0];

    //调整各个图层的间距
    numberAndNotesLayer.frame().setX(dateAndDesignerTextLayer.frame().x() - 11);
    numberAndNotesLayer.frame().setY(dateAndDesignerTextLayer.frame().y() + 82);
    updateHistorylayerGroup.resizeToFitChildrenWithOption(0);

  } else {

    //在最新的记录找到最靠后的图层，并在其下方插入生成的目录项
    var latestHistoryLayersArray = latestHistoryLayersGroup.layers();
    latestHistoryLayersArray.sort(compareLayers);
    //如果是旧版插件生成，数字和更新记录分开，那么数字是数组第二位；如果是新版生成的，那么更新内容在数组第一位（因为更新内容往前偏了 11pt）
    var testLayer = latestHistoryLayersArray[1];
    var numberAndNotesLayer = latestHistoryLayersArray[0];
    if (!testLayer.isMemberOfClass(MSTextLayer) || testLayer.stringValue() == "1.") {
      var alert = [[NSAlert alloc] init];
      [alert setMessageText:"暂不支持与旧版本 Fletch 生成或在旧版本文档模板内添加的历史记录合并"];
      [alert addButtonWithTitle:"确定"];
      [alert beginSheetModalForWindow:[addHistoryWC window] completionHandler:nil];
      return;
    }

    //在更新记录后追加文字
    numberAndNotesLayer.setStringValue(numberAndNotesLayer.stringValue() + "\n" + generateUpdateNotes(notesArray));
    var textList = [[NSTextList alloc] initWithMarkerFormat:"{decimal}." options:0];
    numberAndNotesLayer.changeListType(textList);
    latestHistoryLayersGroup.resizeToFitChildrenWithOption(0);
  }

  // 排列目录
  var currentColumnNumber = 1;
  var maxColumnNumber = 2;
  var hasTooManyHistory = false;
  for (var i = 0; i < historyLayerGroupsArray.length; i++) {
    historyLayerGroupsArray[i].isVisible = true;
    if (i == 0) {
      historyLayerGroupsArray[i].frame().setX(historyTitleTextLayer.frame().x() - 11);
      historyLayerGroupsArray[i].frame().setY(229);
      var farestBottom = historyLayerGroupsArray[i].frame().y() + historyLayerGroupsArray[i].frame().height();
      if (farestBottom > 1540) {
        if (willCombine == 0) {
          //如果不是合并后过长，则删除被添加的目录并提示，弹窗不关闭
          historyLayerGroupsArray[i].removeFromParent();
          var alert = [[NSAlert alloc] init];
          [alert setMessageText:"更新记录过长"];
          [alert setInformativeText:"请手动添加更新记录"];
          [alert addButtonWithTitle:"确定"];
          [alert beginSheetModalForWindow:[addHistoryWC window] completionHandler:nil];
          return;
          // [NSApp displayDialog: "请手动添加更新记录" withTitle: "更新记录过长"];
        } else {
          //如果是合并后过长，因为单列过长难处理，所以直接排；后续目录正常排列，弹窗关闭
          //closeAddHistoryWindow(addHistoryWC);
          // [NSApp displayDialog: "请手动调整更新记录" withTitle: "更新记录过长"];
        }
      }
    } else {
      if (currentColumnNumber > maxColumnNumber) {
        historyLayerGroupsArray[i].isVisible = false;
        hasTooManyHistory = true;
        continue;
      }
      historyLayerGroupsArray[i].frame().setX(historyLayerGroupsArray[0].frame().x() + 688 * (currentColumnNumber - 1));
      historyLayerGroupsArray[i].frame().setY(historyLayerGroupsArray[i-1].frame().y() + historyLayerGroupsArray[i-1].frame().height() + 154);
      var farestBottom = historyLayerGroupsArray[i].frame().y() + historyLayerGroupsArray[i].frame().height();
      if (farestBottom > 1540) {
          currentColumnNumber += 1;
          if (currentColumnNumber > maxColumnNumber) {
            historyLayerGroupsArray[i].isVisible = false;
            hasTooManyHistory = true;
            continue;
          }
          historyLayerGroupsArray[i].frame().setX(0 + 688 * (currentColumnNumber - 1));
          historyLayerGroupsArray[i].frame().setY(229);
          farestBottom = historyLayerGroupsArray[i].frame().y() + historyLayerGroupsArray[i].frame().height();
          if (farestBottom > 1540) {
            // 理论上不会出现这种情况
            historyLayerGroupsArray[i].isVisible = false;
            [NSApp displayDialog: "请手动编辑更新记录" withTitle: "更新记录过长"];
            currentColumnNumber = maxColumnNumber + 1;
          }
      }
    }
  }

  historyLayerGroup.resizeToFitChildrenWithOption(0);
  
  if (hasTooManyHistory) {
    //获取是否选择过不再提醒
    var kTooManyHistoryHidingNofityKey = 'kTooManyHistoryHidingNofity';
    var willNotify = NSUserDefaults.standardUserDefaults().objectForKey(kTooManyHistoryHidingNofityKey);
    if (willNotify != 1) {
      var alert = [[NSAlert alloc] init];
      [alert setMessageText:"更新记录添加成功"];
      [alert setInformativeText:"由于更新记录过多，较旧的更新记录已被隐藏"];
      [alert addButtonWithTitle:"确定"];
      [[alert suppressionButton] setTitle:"不再提醒"];
      alert.showsSuppressionButton = true;
      [alert runModal];
      if ([[alert suppressionButton] state] == NSOnState) {
        NSUserDefaults.standardUserDefaults().setObject_forKey(true, kTooManyHistoryHidingNofityKey);
      }
    }
 
    ga.sendEvent('AddHistory', 'Success', 'TooManyHistory', notesArray.length);
    zoomToResult(context, overviewArtboard, historyLayerGroupsArray[0]);
    updateDateInCover(context, localizedString);
    closeAddHistoryWindow(addHistoryWC);
  } else {
    ga.sendEvent('AddHistory', 'Success', 'Success', notesArray.length);
    zoomToResult(context, overviewArtboard, historyLayerGroupsArray[0]);
    updateDateInCover(context, localizedString);
    closeAddHistoryWindow(addHistoryWC);
  }
}

// 添加成功后，定位至概述画板，并选中最新一组历史记录来告知结果，取代之前的 Toast
function zoomToResult (context, overviewArtboard, latestHistoryLayersGroup){
  var subLayers = latestHistoryLayersGroup.layers();
  for (var i = 0 ; i < subLayers.length; i++) {
    if (subLayers[i].isMemberOfClass(MSTextLayer) && subLayers[i].fontSize() == 24) {
      context.document.currentPage().changeSelectionBySelectingLayers([ subLayers[i] ]);
      break;
    }
  }
  
  //给 Sketch 或苹方的 bug 填坑，模拟键盘事件
  var returnEvent = CGEventCreateKeyboardEvent(null, 0x24, true);
  var downEvent = CGEventCreateKeyboardEvent(null, 0x7D, true);
  var deleteEvent = CGEventCreateKeyboardEvent(null, 0x33, true);
  var escapeEvent = CGEventCreateKeyboardEvent(null, 0x35, true);
  CGEventPost(kCGHIDEventTap, returnEvent);
  CGEventPost(kCGHIDEventTap, downEvent);
  CGEventPost(kCGHIDEventTap, returnEvent);
  CGEventPost(kCGHIDEventTap, downEvent);
  CGEventPost(kCGHIDEventTap, deleteEvent);
  CGEventPost(kCGHIDEventTap, deleteEvent);
  CGEventPost(kCGHIDEventTap, deleteEvent);
  CGEventPost(kCGHIDEventTap, escapeEvent);
  CGEventPost(kCGHIDEventTap, escapeEvent);

  var canvasView = context.document.currentContentViewController().contentDrawView();
  var originalRect = overviewArtboard.frame().rect();
  var zoomRect = CGRectMake(originalRect.origin.x - 200, originalRect.origin.y - 200, originalRect.size.width + 400, originalRect.size.height + 400);
  // [canvasView centerRect:zoomRect animated:false];
  [canvasView zoomToFitRect:zoomRect];

}

function updateDateInCover (context, dateString) {
  var artboardsOfCurrentPage = context.document.currentPage().artboards();
  var coverArtboardArray = [];
  for (var i = 0; i < artboardsOfCurrentPage.length; i++) {
    // 做兼容。。。。。。。。。。。
    if (artboardsOfCurrentPage[i].name() == ("封面") || artboardsOfCurrentPage[i].name() == ("封面 ")) {
      coverArtboardArray.push(artboardsOfCurrentPage[i]);
    }
  }

  // 如果不是只有一个封面，直接退出
  if (coverArtboardArray.length != 1) {
    return
  }

  var layersInCoverArtboard = coverArtboardArray[0].children();
  var dateLayer = null;
  for (var i = 0; i < layersInCoverArtboard.length; i++) {
      if (layersInCoverArtboard[i].name().includes("最后更新") || layersInCoverArtboard[i].name() == "date") {
          dateLayer = layersInCoverArtboard[i];
      }
  }

  if (dateLayer) {
    var dateOfNow = new Date();
    // 因为历史那里只传了月日，所以年份用当年的来做
    var dateInfo = "最后更新 " + dateOfNow.getFullYear() + "年" + dateString;
    dateLayer.setTextAlignment(0);// 设置左对齐
    dateLayer.setStringValue(dateInfo);
    dateLayer.setName(dateInfo);
  }
}

function closeAddHistoryWindow (addHistoryWC){
  [addHistoryWC close];
  // 移除对窗口的引用
  var threadDictionary = NSThread.mainThread().threadDictionary();
  var identifier = "com.flyme.uxd.pbb.sketch-helper.addHistory";
  threadDictionary.removeObjectForKey(identifier);
  // 停止插件运行
  COScript.currentCOScript().setShouldKeepAround_(false);
}