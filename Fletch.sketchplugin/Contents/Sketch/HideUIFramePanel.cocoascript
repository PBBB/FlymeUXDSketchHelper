

var showHideUIFramePanel = function (context) {

  @import 'Fletch.framework/FletchSketchHelper.js'
  @import 'Libraries/MochaJSDelegate.js'
  @import 'Libraries/ga.js'

  //如果有有界面的画板，则开始初始化面板
  //存储线程标识符，避免弹出多个面板
  var threadDictionary = NSThread.mainThread().threadDictionary();
  var identifier = "com.flyme.uxd.pbb.sketch-helper.hideUIFramePanel";

  //如果已经存在了面板，则抖动窗口然后直接退出
  if (threadDictionary[identifier]) {
    threadDictionary[identifier].shakeWindow();
  	return
  }

  
  //获取画板
  var selectedArtboards = prepareSelectedArtboards(context);
  var artboardsToProcess = [];
  if (selectedArtboards.length == 0) {
    artboardsToProcess = context.document.currentPage().artboards()
  } else {
    artboardsToProcess = selectedArtboards;
  }

  //筛选出有界面的画板，并提取出框架、界面名称及说明
  var artboardsWithUIFrame = [];
  for (var i = 0; i < artboardsToProcess.length; i++) {
    for (var j = 0; j < artboardsToProcess[i].layers().length; j++){
      if (artboardsToProcess[i].layers()[j].name() == "框架"){
        artboardsWithUIFrame.push(artboardsToProcess[i]);
      }
    }
  }
  artboardsWithUIFrame.sort(compareLayers);

  //以下三个为二维数组，子数组为每个有界面的画板下相应元素的数组
  var frameLayers = [];
  var uiNameLayers = [];
  var uiDescriptionLayers = [];
  for (var i = 0; i < artboardsWithUIFrame.length; i++) {
    for (var j = 0; j < artboardsWithUIFrame[i].layers().length; j++){
      if (artboardsWithUIFrame[i].layers()[j].name() == "框架"){
      	while (frameLayers.length <= i) {
      		frameLayers.push([]);
      	}
        for (var k = 0; k < artboardsWithUIFrame[i].layers()[j].layers().length; k++){
         	frameLayers[i].push(artboardsWithUIFrame[i].layers()[j].layers()[k]);
        }
        continue;
      }
      if (artboardsWithUIFrame[i].layers()[j].name() == "界面名称"){
        for (var k = 0; k < artboardsWithUIFrame[i].layers()[j].layers().length; k++){
        	if (artboardsWithUIFrame[i].layers()[j].layers()[k].isMemberOfClass(MSTextLayer)){
        		while (uiDescriptionLayers.length <= i) {
        			uiDescriptionLayers.push([]);
        		}
        		uiDescriptionLayers[i].push(artboardsWithUIFrame[i].layers()[j].layers()[k]);
        	} else {
        		while (uiNameLayers.length <= i) {
        			uiNameLayers.push([]);
        		}
				uiNameLayers[i].push(artboardsWithUIFrame[i].layers()[j].layers()[k]);
        	}
         }
        continue;
      }
    }
  }
  //图层按位置排序
  for (var i = 0; i < artboardsWithUIFrame.length; i++) {
	frameLayers[i].sort(compareLayers);
	uiNameLayers[i].sort(compareLayers);
	uiDescriptionLayers[i].sort(compareLayers);
  }
  

  //获取信息之后取消选择，方便下一步选择操作
  context.document.currentPage().changeSelectionBySelectingLayers(nil);

  //如果没有有界面的画板，则直接退出
  if(artboardsWithUIFrame.length == 0){
    [NSApp displayDialog: "框架的图层组名须为“框架”，界面名称及说明的图层组名须为“界面名称”" withTitle: "未找到包含界面框的画板"];
    return;
  }

  //初始化 GA
  var ga = new Analytics(context);

  //定义 Delegate 所需要的方法
  COScript.currentCOScript().setShouldKeepAround_(true);
  var hideUIFramePanelDelegate = new MochaJSDelegate();
  hideUIFramePanelDelegate.setHandlerForSelector("didClickFinishOperationInWindowController:", function(hideUIFramePanelWC){
    removeHelperLayersInArtboards(artboardsWithUIFrame);
    finishOperationInWindowController(hideUIFramePanelWC);
  });

  hideUIFramePanelDelegate.setHandlerForSelector("didSelectLayer:", updateFramesWithSelectedLayer);

  // 这个函数放在里面是为了方便用到许多变量，可以避免传很多参数
  function updateFramesWithSelectedLayer(selectedLayer) {
    if (selectedLayer.length == 0){
      return;
    }
    if (selectedLayer.length > 1){
      //虽然想上报多选的事件，但是因为会触发多次，所以会使数量虚高，同时也意味着多选的情况基本没法处理了
      // ga.sendEvent('ShowOrHideUIFrameOrDescription', 'Fail', 'MultipleSelection')
      return;
    }

    //判断来自哪个画板
    var indexOfArtboard = artboardsWithUIFrame.findIndex(function(element){
      return element == selectedLayer[0].parentArtboard();
    });
    if (indexOfArtboard == -1){
      return;
    }

    //判断所选的是界面框还是小框
    //定义类型，界面框 1，描述框 2，未定义 0
    var type = 0;
    var indexOfFrame = -1;
    for (var j = 0; j < artboardsWithUIFrame[indexOfArtboard].layers().length; j++){
      var layer = artboardsWithUIFrame[indexOfArtboard].layers()[j];
      if (layer.name().localeCompare("_辅助线框 / 界面说明") == 0 || layer.name().localeCompare("_辅助线框 / 界面框") == 0){
        indexOfFrame = layer.layers().findIndex(function(element){
          return element == selectedLayer[0];
        });
        if (indexOfFrame != -1) {
          type = layer.name().localeCompare("_辅助线框 / 界面说明") == 0 ? 2 : 1;
          break;
        }
      } 
    }
    var isVisible = isLayerUnderShapeGroupVisible(selectedLayer[0]);

    switch (type) {
      case 0:
      return;

      //界面框
      case 1:
      //如果可见，就隐藏界面框，同时隐藏描述框；如果不可见，就显示界面框，同时显示描述框
      setLayerVisibility(frameLayers[indexOfArtboard][indexOfFrame], !isVisible);
      setLayerVisibility(uiNameLayers[indexOfArtboard][indexOfFrame], !isVisible);
      setLayerVisibility(uiDescriptionLayers[indexOfArtboard][indexOfFrame], !isVisible);
      setRectangleStyle(shapeGroupOfFrameLayerGroupArray[indexOfArtboard].layers()[indexOfFrame], !isVisible);
      setRectangleStyle(shapeGroupOfDescriptionLayerGroupArray[indexOfArtboard].layers()[indexOfFrame], !isVisible);
      break;

      //描述框
      case 2:
      //如果可见，就只隐藏描述框；如果不可见，就显示界面框，同时显示描述框
      setLayerVisibility(uiDescriptionLayers[indexOfArtboard][indexOfFrame], !isVisible);
      setRectangleStyle(shapeGroupOfDescriptionLayerGroupArray[indexOfArtboard].layers()[indexOfFrame], !isVisible);
      if (!isVisible) {
        setLayerVisibility(frameLayers[indexOfArtboard][indexOfFrame], !isVisible);
        setLayerVisibility(uiNameLayers[indexOfArtboard][indexOfFrame], !isVisible);
        setRectangleStyle(shapeGroupOfFrameLayerGroupArray[indexOfArtboard].layers()[indexOfFrame], !isVisible);
      }
      break;

      default:
      break;
    }

    //更新字母
    rearrangeLettersOfNamesInArtboards ([ artboardsWithUIFrame[indexOfArtboard] ], [ uiNameLayers[indexOfArtboard] ]);

    //上报成功事件
    type == 1 ? ga.sendEvent('ShowOrHideUIFrameOrDescription', 'Success', 'UIFrame', 1) : ga.sendEvent('ShowOrHideUIFrameOrDescription', 'Success', 'Description', 1);
  }

  //生成弹出的面板，设定 Delegate
  var hideUIFramePanelWC = [[ShowHideUIFrameWindowController alloc] initWithWindowNibName:@"ShowHideUIFrameWindowController"];
  hideUIFramePanelWC.delegate = (hideUIFramePanelDelegate.getClassInstance());
  [hideUIFramePanelWC showWindow:self];

  //关闭面板后需要移除对面板的引用
  var closeButton = [hideUIFramePanelWC window].standardWindowButton(NSWindowCloseButton);
  closeButton.setCOSJSTargetFunction(function(sender){
    removeHelperLayersInArtboards(artboardsWithUIFrame);
    finishOperationInWindowController(hideUIFramePanelWC);
  });

  threadDictionary[identifier] = hideUIFramePanelWC;

  //根据线框、说明等位置数据生成线框
  //清理之前可能遗留的线框
  removeHelperLayersInArtboards(artboardsWithUIFrame);
  var shapeGroupOfFrameLayerGroupArray = [];
  var shapeGroupOfDescriptionLayerGroupArray = [];

  for (var i = 0; i < artboardsWithUIFrame.length; i++) {
  	shapeGroupOfFrameLayerGroupArray.push(MSLayerGroup.new());
  	shapeGroupOfFrameLayerGroupArray[i].setName("_辅助线框 / 界面框");
  	shapeGroupOfDescriptionLayerGroupArray.push(MSLayerGroup.new());
  	shapeGroupOfDescriptionLayerGroupArray[i].setName("_辅助线框 / 界面说明");

  	for (var j = 0; j < uiNameLayers[i].length; j++){
  		// 外框留出边距
  		var uiFrameX = uiNameLayers[i][j].frame().x() - 10;
  		var uiFrameY = uiNameLayers[i][j].frame().y() - 10;
  		//确定框的起点坐标，因为获取到的是相对父图层的坐标，所以转换成相对画板的
  		var ancestorsOfFrame = uiNameLayers[i][j].ancestors()
  		var parentOfFrame = ancestorsOfFrame[ancestorsOfFrame.length - 1]
  		var pointOfFrameRelativeToArtboard = parentOfFrame.convertPoint_toLayer_(CGPointMake(uiFrameX,uiFrameY), artboardsWithUIFrame[i]);
  		//确定框的大小
  		var uiFrameWidth = frameLayers[i][j].frame().width() + 10 * 2;
  		var uiFrameHeight = uiNameLayers[i][j].frame().height() + 11 + frameLayers[i][j].frame().height() + 10 * 2;
  		//计算逻辑说明框的起点
  		var uiDescriptionX = pointOfFrameRelativeToArtboard.x;
  		var uiDescriptionY = pointOfFrameRelativeToArtboard.y + uiFrameHeight;
  		//确定说明相对画板的坐标
  		var ancestorsOfDescription = uiDescriptionLayers[i][j].ancestors();
  		var parentOfDescription = ancestorsOfDescription[ancestorsOfDescription.length - 1]
  		var pointOfDescriptionRelativeToArtboard = parentOfDescription.convertPoint_toLayer_(CGPointMake(uiDescriptionLayers[i][j].frame().x(),uiDescriptionLayers[i][j].frame().y()), artboardsWithUIFrame[i]);
  		//计算说明框的宽高
  		var uiDescriptionWidth = Math.max(uiDescriptionLayers[i][j].frame().width(), uiFrameWidth);
  		var originalUIDescriptionHeight = pointOfDescriptionRelativeToArtboard.y - pointOfFrameRelativeToArtboard.y - uiFrameHeight + uiDescriptionLayers[i][j].frame().height() + 20; //高度额外加 20 是为了方便点击
  		var uiDescriptionHeight = Math.min(originalUIDescriptionHeight, 230);
  		//画框
  		var isFrameHiddenOrTransparent = isLayerHiddenOrTransparent(uiNameLayers[i][j]);
  		var shapeGroupOfFrame = generateRectangleWithRect(NSMakeRect(pointOfFrameRelativeToArtboard.x,pointOfFrameRelativeToArtboard.y,uiFrameWidth,uiFrameHeight), !isFrameHiddenOrTransparent);
  		shapeGroupOfFrameLayerGroupArray[i].addLayers([shapeGroupOfFrame]);
  		var isDescriptionHiddenOrTransparent = isLayerHiddenOrTransparent(uiDescriptionLayers[i][j]);
  		var shapeGroupOfDescription = generateRectangleWithRect(NSMakeRect(uiDescriptionX,uiDescriptionY,uiDescriptionWidth,uiDescriptionHeight), !isDescriptionHiddenOrTransparent);
  		shapeGroupOfDescriptionLayerGroupArray[i].addLayers([shapeGroupOfDescription]);
  		// artboardsWithUIFrame[i].addLayers([shapeGroupOfFrame, shapeGroupOfDescription]);
  	}
  	shapeGroupOfFrameLayerGroupArray[i].resizeToFitChildrenWithOption(0);
  	shapeGroupOfFrameLayerGroupArray[i].setHasClickThrough(true);
  	shapeGroupOfDescriptionLayerGroupArray[i].resizeToFitChildrenWithOption(0);
  	shapeGroupOfDescriptionLayerGroupArray[i].setHasClickThrough(true);
    artboardsWithUIFrame[i].addLayers([shapeGroupOfFrameLayerGroupArray[i], shapeGroupOfDescriptionLayerGroupArray[i]]);
  }
  rearrangeLettersOfNamesInArtboards(artboardsWithUIFrame, uiNameLayers);
}

function prepareSelectedArtboards (context) {
  var selection = context.selection;
  
  // 提取所选画板
  var selectedArtboards = [];
  for (var i = 0; i < selection.length; i++) {
    if (selection[i].isMemberOfClass(MSArtboardGroup)) {
      selectedArtboards.push(selection[i]);
    }
  }
  return selectedArtboards;
}

//画框的方法，并根据当前界面框是否能看见来决定框的颜色
function generateRectangleWithRect(nsRect, isVisible) {
	var rect   = MSRectangleShape.alloc().init();
	rect.frame = MSRect.rectWithRect(nsRect);
	var shapeGroup = MSShapeGroup.shapeWithPath(rect);
	var style  = MSStyle.alloc().init();
	var styleFill = style.addStylePartOfType(0);
	styleFill.color = MSColor.colorWithRGBADictionary({"r": 0, "g": 0, "b": 0, "a": 0.02});
	var styleBorder = style.addStylePartOfType(1);
	styleBorder.color = MSColor.colorWithRGBADictionary({"r": 0.96, "g": 0.65, "b": 0.137, "a": 1});
	styleBorder.thickness = 2;
	isVisible ? style.contextSettings().setOpacity(1) : style.contextSettings().setOpacity(0.3);
	shapeGroup.setStyle(style);
	return shapeGroup;
}

//图层按位置排序
function compareLayers (firstLayer, secondLayer) {
    if (firstLayer.frame().y() != secondLayer.frame().y()) {
      return firstLayer.frame().y() - secondLayer.frame().y();
    } else {
      return firstLayer.frame().x() - secondLayer.frame().x();
    }
 }

//图层被隐藏或者透明度为 0 都视为不可见
function isLayerHiddenOrTransparent (layer) {
	if (!layer.isVisible()) {
		return true;
	} else if (layer.style().contextSettings().opacity() == 0) {
		return true;
	} else {
		return false;
	}
}

//如果 shapeGroup 透明度不为 1，则视为可见
function isLayerUnderShapeGroupVisible (shapeGroup) {
  if (!shapeGroup.isVisible()) {
    return false;
  } else if (shapeGroup.style().contextSettings().opacity() == 1) {
    return true;
  } else {
    return false;
  }
}

//隐藏或显示图层
function setLayerVisibility (layer, isVisible) {
  var style = layer.style();
  if (isVisible) {
    layer.setIsVisible(true);
    style.contextSettings().setOpacity(1);
    layer.setStyle(style);
  } else {
    layer.setIsVisible(false);
  }
}

//更新框的样式
function setRectangleStyle (shapeGroup, isVisible) {
  var style = shapeGroup.style();
  isVisible ? style.contextSettings().setOpacity(1) : style.contextSettings().setOpacity(0.3);
  shapeGroup.setStyle(style);
}

//删掉生成的框
function removeHelperLayersInArtboards (artboardsWithUIFrame) {
	var helperLayers = [];
	for (var i = 0; i < artboardsWithUIFrame.length; i++) {
		for (var j = 0; j < artboardsWithUIFrame[i].layers().length; j++){
			// log(artboardsWithUIFrame[i].layers()[j].name());
			if (artboardsWithUIFrame[i].layers()[j].name().localeCompare("_辅助线框 / 界面说明") == 0 || artboardsWithUIFrame[i].layers()[j].name().localeCompare("_辅助线框 / 界面框") == 0){
				helperLayers.push(artboardsWithUIFrame[i].layers()[j]);
			} 
		}
	}
	for (var i = 0; i < helperLayers.length; i++) {
		helperLayers[i].removeFromParent();
	}
}

//关闭窗口，退出插件
function finishOperationInWindowController(windowController){
  [windowController close];
  // 移除对面板的引用
  var threadDictionary = NSThread.mainThread().threadDictionary();
  var identifier = "com.flyme.uxd.pbb.sketch-helper.hideUIFramePanel";
  threadDictionary.removeObjectForKey(identifier);
  // 停止插件运行
  COScript.currentCOScript().setShouldKeepAround_(false);
}

//重新按顺序生成字母
function rearrangeLettersOfNamesInArtboards (artboardsWithUIFrame, uiNameLayers) {
  var letters = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"];
  var letterLayerID = null;
  for (var i = 0; i < artboardsWithUIFrame.length; i++) {
    var numberOfVisibleNameLayers = 0;
    for (var j = 0; j < uiNameLayers[i].length; j++){
      if (!isLayerHiddenOrTransparent(uiNameLayers[i][j])) {
        if (letterLayerID == null) {
          letterLayerID = getLetterLayerIDsInUINameSymbol(uiNameLayers[i][j]);
          if (letterLayerID == null) {
            [NSApp displayDialog: "Symbol 中字母对应的图层名需为“A”" withTitle: "界面名称需为 Symbol"];
            return;
          }
        }
        numberOfVisibleNameLayers++;
        var existingOverrides = uiNameLayers[i][j].overrides();
        var overrides = NSMutableDictionary.dictionaryWithDictionary(existingOverrides);
        overrides[letterLayerID] = letters[numberOfVisibleNameLayers - 1];
        uiNameLayers[i][j].overrides = overrides;
      }
    }
  }
}

//获取字母图层在 Symbol 中的图层 ID
function getLetterLayerIDsInUINameSymbol (uiNameSymbol) {
  var symbolMaster = uiNameSymbol.symbolMaster();
  for (var i = 0; i < symbolMaster.layers().length; i++){
    if(symbolMaster.layers()[i].name().localeCompare("A") == 0) {
      return symbolMaster.layers()[i].objectID();
    } 
  }
  return null;
}


